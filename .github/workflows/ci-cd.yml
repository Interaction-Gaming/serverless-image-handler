name: CI/CD

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      # Build our own libvips with HEIC support so that sharp will use that
      # https://github.com/libvips/libvips/wiki/Build-for-Ubuntu
      # https://github.com/libvips/libvips/issues/1511
      - name: install libcgif
        run: sudo add-apt-repository ppa:lovell/cgif && sudo apt-get update && sudo apt-get install libcgif-dev
      - name: Install libvips dependencies
        run: sudo apt-get install -y libheif-dev libfftw3-dev libopenexr-dev libgsf-1-dev libglib2.0-dev libglib2.0-0 liborc-dev libopenslide-dev libmatio-dev libwebp-dev libjpeg-turbo8-dev libexpat1-dev libexif-dev libtiff5-dev libcfitsio-dev libpoppler-glib-dev librsvg2-dev libpango1.0-dev libopenjp2-7-dev libimagequant-dev
      - name: Install build tools
        run: sudo apt-get install build-essential ninja-build python3-pip bc wget
      - name: Remove system libvips
        run: sudo apt-get remove libvips42
      - name: Build libvips with HEIC support
        run: |
          pip3 install meson
          export PATH=$PATH:/home/runner/.local/bin
          wget https://github.com/libvips/libvips/releases/download/v8.15.0/vips-8.15.0.tar.xz
          tar xf vips-8.15.0.tar.xz
          cd vips-8.15.0
          meson build --libdir=lib --buildtype=release -Dintrospection=disabled
          cd build
          meson compile
          meson test
          sudo pip3 install meson
          sudo meson install
      - name: NPM install
        run: npm run clean:install
        working-directory: source/constructs
#      - run: npm uninstall sharp
#        working-directory: source/constructs
#      - run: pkg-config --modversion vips-cpp
#      - run: npm install --verbose --arch=x64 --platform=linux --foreground-scripts --no-cache sharp@0.32.6
#        working-directory: source/constructs
      - name: Create lib layer for lambda
        run: | 
          mkdir lib
          cp /usr/local/lib/libvips.so.42 lib/
          cp /usr/local/lib/libvips-cpp.so.42 lib/
          cp /lib/x86_64-linux-gnu/libgobject-2.0.so.0 lib/
          cp /lib/x86_64-linux-gnu/libglib-2.0.so.0 lib/
          cp /lib/x86_64-linux-gnu/libgio-2.0.so.0 lib/
          cp /lib/x86_64-linux-gnu/libheif.so.1 lib/
          cp /lib/x86_64-linux-gnu/libfftw3.so.3 lib/
          cp /lib/x86_64-linux-gnu/libfftw3_omp.so.3 lib/
          cp /lib/x86_64-linux-gnu/libfftw3_threads.so.3 lib/
          cp /lib/x86_64-linux-gnu/libgsf-1.so.114 lib/
          cp /lib/x86_64-linux-gnu/liborc-0.4.so.0 lib/
          cp /lib/x86_64-linux-gnu/libopenslide.so.0 lib/
          cp /lib/x86_64-linux-gnu/libmatio.so.9 lib/
          cp /lib/x86_64-linux-gnu/libwebp.so.6 lib/
          cp /lib/x86_64-linux-gnu/libwebpdemux.so.2 lib/
          cp /lib/x86_64-linux-gnu/libwebpmux.so.3 lib/
          cp /lib/x86_64-linux-gnu/libjpeg.so.8 lib/
          cp /lib/x86_64-linux-gnu/libexpat.so.1 lib/
          cp /lib/x86_64-linux-gnu/libexif.so.12 lib/
          cp /lib/x86_64-linux-gnu/libtiff.so.5 lib/
          cp /lib/x86_64-linux-gnu/libcfitsio.so.8 lib/
          cp /lib/x86_64-linux-gnu/libpoppler-glib.so.8 lib/
          cp /lib/x86_64-linux-gnu/libpoppler.so.97 lib/
          cp /lib/x86_64-linux-gnu/librsvg-2.so.2 lib/
          cp /lib/x86_64-linux-gnu/libpango-1.0.so.0 lib/
          cp /lib/x86_64-linux-gnu/libpangocairo-1.0.so.0 lib/
          cp /lib/x86_64-linux-gnu/libpangoft2-1.0.so.0 lib/
          cp /lib/x86_64-linux-gnu/libpangoxft-1.0.so.0 lib/
          cp /lib/x86_64-linux-gnu/libopenjp2.so.7 lib/
          cp /lib/x86_64-linux-gnu/libimagequant.so.0 lib/
          cp /lib/x86_64-linux-gnu/libgmodule-2.0.so.0 lib/
          cp /lib/x86_64-linux-gnu/libIlmImf-2_3.so.24 lib/
          cp /lib/x86_64-linux-gnu/libIlmImfUtil-2_3.so.24 lib/
          cp /lib/x86_64-linux-gnu/libcgif.so.0 lib/
          cp /lib/x86_64-linux-gnu/libpng16.so.16 lib/
          cp /lib/x86_64-linux-gnu/libcairo.so.2 lib/
          cp /lib/x86_64-linux-gnu/liblcms2.so.2 lib/
          cp /lib/x86_64-linux-gnu/libffi.so.7 lib/
          cp /lib/x86_64-linux-gnu/libpcre.so.3 lib/
          cp /lib/x86_64-linux-gnu/libmount.so.1 lib/
          zip -r libvips-layer.zip lib
        working-directory: source/constructs/lib/back-end

      # Deploy cloudformation stack with CDK
      - name: Set QA Environment
        if: github.base_ref == 'qa'
        run: |
          echo "STAGE=qa" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.LOWER_ENV_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.LOWER_ENV_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "SOURCE_BUCKET=mslc-player-qa-document-upload" >> $GITHUB_ENV
          echo "S3_KMS_KEY_ARN=arn:aws:kms:us-east-1:963973445526:key/9ea6ef14-c12a-42c6-9e6d-56cc0f389bb4" >> $GITHUB_ENV
          echo "SIGNING_SECRET=mslc-document-upload-qa" >> $GITHUB_ENV
      - name: Set UAT Environment
        if: github.base_ref == 'uat'
        run: |
          echo "STAGE=uat" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.LOWER_ENV_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.LOWER_ENV_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "SOURCE_BUCKET=mslc-player-uat-document-upload" >> $GITHUB_ENV
          echo "S3_KMS_KEY_ARN=arn:aws:kms:us-east-1:963973445526:key/60c48e18-9e6c-4f74-84c7-5241fd45eca3" >> $GITHUB_ENV
          echo "SIGNING_SECRET=mslc-document-upload-uat" >> $GITHUB_ENV
      - name: Set Prod Environment
        if: github.base_ref == 'master'
        run: |
          echo "STAGE=prod" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
      - name: Deploy Stack
        run: overrideWarningsEnabled=false npx cdk deploy --parameters CorsEnabledParameter=Yes --parameters CorsOriginParameter='*' --parameters SourceBucketsParameter=${{ env.SOURCE_BUCKET }} --parameters DeployDemoUIParameter=No --parameters EnableSignatureParameter=Yes --parameters SecretsManagerSecretParameter=${{ env.SIGNING_SECRET }} --parameters SecretsManagerKeyParameter=SECRET_KEY --parameters S3KmsKeyArnParameter="${{ env.S3_KMS_KEY_ARN }}" --context stackName=mslc-document-upload-image-handler-${{ env.STAGE }}
        working-directory: source/constructs